/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Famacy.view;

import Famacy.model.Item;
import Famacy.model.Transaction;
import Famacy.model.TransactionItem;
import Famacy.service.TransactionService;
import java.awt.BorderLayout;
import java.awt.Point;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JWindow;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JTable;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import javax.swing.JPanel;


public class TransactionManagementForm extends javax.swing.JFrame {

    private TransactionService transactionService;
    private DefaultTableModel tableModel;
    private DefaultTableModel itemTableModel;
    private JWindow suggestionWindow;
    private JList<String> suggestionList;
    private int editingRow = -1;
    
    public TransactionManagementForm(TransactionService transactionService) {
        this.transactionService = transactionService;
        
        initComponents();
        transactionPane.setVisible(false);
        setCurrentDate();
        setupAutoComplete();
        loadTransactionData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPane = new javax.swing.JPanel();
        transactionLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        transactionTable = new javax.swing.JTable();
        newTransactionButton = new javax.swing.JButton();
        viewTransactionButton = new javax.swing.JButton();
        transactionPane = new javax.swing.JPanel();
        transactionLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        itemTable = new javax.swing.JTable();
        itemNameLabel = new javax.swing.JLabel();
        quantityLabel = new javax.swing.JLabel();
        itemNameField = new javax.swing.JTextField();
        quantityField = new javax.swing.JTextField();
        addItemButton = new javax.swing.JButton();
        saveTransactionButton = new javax.swing.JButton();
        quantityLabel1 = new javax.swing.JLabel();
        transactionDateField = new javax.swing.JTextField();
        quantityLabel2 = new javax.swing.JLabel();
        priceField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        transactionLabel.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        transactionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        transactionLabel.setText("Transaction");

        transactionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Date", "Total Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        transactionTable.getTableHeader().setResizingAllowed(false);
        transactionTable.getTableHeader().setReorderingAllowed(false);
        transactionTable.setUpdateSelectionOnSort(false);
        jScrollPane1.setViewportView(transactionTable);

        newTransactionButton.setText("New Transaction");
        newTransactionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newTransactionButtonActionPerformed(evt);
            }
        });

        viewTransactionButton.setText("View Transaction");
        viewTransactionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewTransactionButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPaneLayout = new javax.swing.GroupLayout(mainPane);
        mainPane.setLayout(mainPaneLayout);
        mainPaneLayout.setHorizontalGroup(
            mainPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(transactionLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPaneLayout.createSequentialGroup()
                .addContainerGap(96, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 489, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(89, 89, 89))
            .addGroup(mainPaneLayout.createSequentialGroup()
                .addGap(148, 148, 148)
                .addComponent(newTransactionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61)
                .addComponent(viewTransactionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mainPaneLayout.setVerticalGroup(
            mainPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPaneLayout.createSequentialGroup()
                .addComponent(transactionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(mainPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newTransactionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewTransactionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 82, Short.MAX_VALUE))
        );

        transactionPane.setPreferredSize(new java.awt.Dimension(674, 533));

        transactionLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        transactionLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        transactionLabel1.setText("Transaction");

        itemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Name", "Quantity", "Type", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        itemTable.getTableHeader().setResizingAllowed(false);
        itemTable.getTableHeader().setReorderingAllowed(false);
        itemTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itemTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(itemTable);

        itemNameLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        itemNameLabel.setText("Item Name :");

        quantityLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        quantityLabel.setText("Quantity :");

        addItemButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        addItemButton.setText("Add");
        addItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addItemButtonActionPerformed(evt);
            }
        });

        saveTransactionButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        saveTransactionButton.setText("Save Transaction");
        saveTransactionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTransactionButtonActionPerformed(evt);
            }
        });

        quantityLabel1.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        quantityLabel1.setText("Price :");

        transactionDateField.setEditable(false);
        transactionDateField.setEnabled(false);

        quantityLabel2.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        quantityLabel2.setText("Date :");

        priceField.setEditable(false);
        priceField.setEnabled(false);

        javax.swing.GroupLayout transactionPaneLayout = new javax.swing.GroupLayout(transactionPane);
        transactionPane.setLayout(transactionPaneLayout);
        transactionPaneLayout.setHorizontalGroup(
            transactionPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(transactionLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(transactionPaneLayout.createSequentialGroup()
                .addGroup(transactionPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(transactionPaneLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(transactionPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(itemNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                            .addComponent(quantityLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(quantityLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(quantityLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(transactionPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(transactionPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(itemNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(quantityField, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(transactionDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(priceField, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(transactionPaneLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(addItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(transactionPaneLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(saveTransactionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );
        transactionPaneLayout.setVerticalGroup(
            transactionPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(transactionPaneLayout.createSequentialGroup()
                .addComponent(transactionLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(transactionPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(transactionPaneLayout.createSequentialGroup()
                        .addGroup(transactionPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(itemNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(itemNameField))
                        .addGap(18, 18, 18)
                        .addGroup(transactionPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(quantityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(quantityField))
                        .addGap(18, 18, 18)
                        .addGroup(transactionPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(quantityLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(priceField))
                        .addGap(18, 18, 18)
                        .addGroup(transactionPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(quantityLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(transactionDateField))
                        .addGap(18, 18, 18)
                        .addComponent(addItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(87, 87, 87)
                        .addComponent(saveTransactionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(transactionPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(transactionPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void newTransactionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newTransactionButtonActionPerformed
        // TODO add your handling code here:
        mainPane.setVisible(false);
        transactionPane.setVisible(true);
    }//GEN-LAST:event_newTransactionButtonActionPerformed

    private void addItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addItemButtonActionPerformed
        // TODO add your handling code here:
        addItem();
    }//GEN-LAST:event_addItemButtonActionPerformed

    private void saveTransactionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveTransactionButtonActionPerformed
        // TODO add your handling code here:
        saveTransaction();
    }//GEN-LAST:event_saveTransactionButtonActionPerformed

    private void itemTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemTableMouseClicked
        int selectedRow = itemTable.getSelectedRow();
        if (selectedRow != -1) {
            String itemName = (String) itemTableModel.getValueAt(selectedRow, 0);
            Integer quantity = (Integer) itemTableModel.getValueAt(selectedRow, 1);
            Double price = (Double) itemTableModel.getValueAt(selectedRow, 2);

            itemNameField.setText(itemName);
            quantityField.setText(quantity.toString());
            priceField.setText(price.toString());

            // Set some marker or variable to indicate that we are updating an existing item
            editingRow = selectedRow;
            suggestionWindow.setVisible(false);
        }        
    }//GEN-LAST:event_itemTableMouseClicked

    private void viewTransactionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewTransactionButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = transactionTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a transaction to view.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int transactionId = (int) transactionTable.getValueAt(selectedRow, 0);
        Transaction transaction = transactionService.getTransactionById(transactionId);

        if (transaction != null) {
            showTransactionDetails(transaction);
        } else {
            JOptionPane.showMessageDialog(this, "Transaction not found.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_viewTransactionButtonActionPerformed

    
    
    private void setCurrentDate() {
        LocalDate currentDate = LocalDate.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        transactionDateField.setText(currentDate.format(formatter));
    }
    
    private void loadTransactionData() {
        tableModel = (DefaultTableModel) transactionTable.getModel();
        tableModel.setRowCount(0); // Clear the table model
        List<Transaction> transactions = transactionService.getAllTransactions();
        for (Transaction transaction : transactions) {
            tableModel.addRow(new Object[]{
                    transaction.getId(),
                    transaction.getTransactionDate(),
                    transaction.getTotalAmount()
            });
        }
    }
    
    private boolean isNumeric(String str) {
        return str.matches("-?\\d+(\\.\\d+)?");  // This regex matches integers and floating-point numbers
    }
    

    private void addItem() {
        String itemName = itemNameField.getText();
        String quantityText = quantityField.getText();
        String priceText = priceField.getText();

        if (!isNumeric(quantityText)) {
            JOptionPane.showMessageDialog(this, "Please enter a valid number for the quantity.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Integer quantity = Integer.valueOf(quantityText);

        Item item = transactionService.getItemByName(itemName);

        if (item != null && !priceText.isEmpty()) {
            Double price = Double.valueOf(priceText);
            itemTableModel = (DefaultTableModel) itemTable.getModel();
            if (editingRow != -1) {
                // Update the existing item in the table
                itemTableModel.setValueAt(itemName, editingRow, 0);
                itemTableModel.setValueAt(quantity, editingRow, 1);
                itemTableModel.setValueAt(price, editingRow, 2);

                // Reset the editing row indicator
                editingRow = -1;
            } else {
                // Add a new item to the table
                itemTableModel.addRow(new Object[]{itemName, quantity, price, item.getType()});
            }
            // Clear the input fields after adding/updating the item
            itemNameField.setText("");
            quantityField.setText("");
            priceField.setText("");

            suggestionWindow.setVisible(false);
        } else {
            JOptionPane.showMessageDialog(this, "Item with name " + itemName + " does not exist in the database.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void saveTransaction() {
        List<TransactionItem> items = new ArrayList<>();
        double totalAmount = 0.0;

        if(itemTableModel != null){
            for (int i = 0; i < itemTableModel.getRowCount(); i++) {
                String itemName = (String) itemTableModel.getValueAt(i, 0);
                Integer quantity = (Integer) itemTableModel.getValueAt(i, 1);
                Double price = (Double) itemTableModel.getValueAt(i, 2);
                String itemType = (String) itemTableModel.getValueAt(i, 3); // Get the item type from the table

                TransactionItem item = new TransactionItem();
                item.setItemName(itemName);
                item.setQuantity(quantity);
                item.setPrice(price);
                item.setItemType(itemType);
                items.add(item);

                totalAmount += quantity * price;
            }    
            String transactionDate = transactionDateField.getText();

            Transaction transaction = new Transaction();
            transaction.setTransactionDate(transactionDate);
            transaction.setTotalAmount(totalAmount);
            transaction.setItems(items);

            for (TransactionItem item : items) {
                item.setTransaction(transaction);
            }

            transactionService.saveTransaction(transaction);
            JOptionPane.showMessageDialog(this, "Transaction saved successfully!");

            // Clear the transaction items table
            itemTableModel.setRowCount(0);

            // Refresh transaction data
            transactionPane.setVisible(false);
            mainPane.setVisible(true);
            loadTransactionData();                
            
        } else {
            JOptionPane.showMessageDialog(this, "Please input at least 1 item", "Error", JOptionPane.ERROR_MESSAGE);            
        }
        

    }
    
    private void setupAutoComplete() {
        suggestionWindow = new JWindow();
        suggestionList = new JList<>();
        suggestionWindow.add(new JScrollPane(suggestionList));
        suggestionWindow.setSize(200, 200);
        
        itemNameField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                updateSuggestions();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                updateSuggestions();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                updateSuggestions();
            }
        });

        itemNameField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_DOWN && suggestionWindow.isVisible()) {
                    suggestionList.requestFocusInWindow();
                    suggestionList.setSelectedIndex(0);
                }
            }
        });

        suggestionList.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    itemNameField.setText(suggestionList.getSelectedValue());
                    suggestionWindow.setVisible(false);
                    fetchItemDetails();
                }
            }
        });

        suggestionList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    itemNameField.setText(suggestionList.getSelectedValue());
                    suggestionWindow.setVisible(false);
                    fetchItemDetails();
                }
            }
        });
    }
    
    private void updateSuggestions() {
        String input = itemNameField.getText();
        List<String> suggestions = transactionService.getAllItems().stream()
                .map(Item::getName)
                .filter(name -> name.toLowerCase().contains(input.toLowerCase()))
                .toList();

        DefaultListModel<String> model = new DefaultListModel<>();
        for (String suggestion : suggestions) {
            model.addElement(suggestion);
        }
        suggestionList.setModel(model);

        if (!suggestions.isEmpty() && !input.isEmpty()) {
            Point location = itemNameField.getLocationOnScreen();
            suggestionWindow.setLocation(location.x, location.y + itemNameField.getHeight());
            suggestionWindow.setVisible(true);
        } else {
            suggestionWindow.setVisible(false);
        }
    }
    
    private void fetchItemDetails() {
        String itemName = itemNameField.getText();
        Item item = transactionService.getItemByName(itemName);

        if (item != null) {
            priceField.setText(String.valueOf(item.getPrice()));
        } else {
            JOptionPane.showMessageDialog(this, "Item with name " + itemName + " does not exist in the database.", "Error", JOptionPane.ERROR_MESSAGE);
            priceField.setText("");
        }
    }
    
    private void showTransactionDetails(Transaction transaction) {
        JDialog transactionDialog = new JDialog(this, "Transaction Details", true);
        transactionDialog.setSize(600, 400);
        transactionDialog.setLayout(new BorderLayout());

        String[] columnNames = {"Item Name", "Quantity", "Price", "Type"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        JTable transactedItemTable = new JTable(model);

        // Disable column reordering
        transactedItemTable.getTableHeader().setReorderingAllowed(false);

        for (TransactionItem item : transaction.getItems()) {
            Object[] rowData = {
                item.getItemName(),
                item.getQuantity(),
                item.getPrice(),
                item.getItemType()
            };
            model.addRow(rowData);
        }

        JScrollPane scrollPane = new JScrollPane(transactedItemTable);
        transactionDialog.add(scrollPane, BorderLayout.CENTER);

        // Create a panel for buttons
        JPanel buttonPanel = new JPanel();

        JButton closeButton = new JButton("Close");
        closeButton.addActionListener(e -> transactionDialog.dispose());
        buttonPanel.add(closeButton);

        JButton generateInvoiceButton = new JButton("Generate Invoice");
        generateInvoiceButton.addActionListener(e -> generateInvoice(transaction));
        buttonPanel.add(generateInvoiceButton);

        transactionDialog.add(buttonPanel, BorderLayout.SOUTH);

        transactionDialog.setLocationRelativeTo(this);
        transactionDialog.setVisible(true);
    }

    
    private void generateInvoice(Transaction transaction) {
        Document document = new Document();
        try {
            
            // Define the folder path
            String folderPath = "invoices";
            File folder = new File(folderPath);

            // Create the folder if it does not exist
            if (!folder.exists()) {
                folder.mkdirs();
            }
            
            String fileName = folder + File.separator + "Invoice_" + transaction.getId() + ".pdf";
            PdfWriter.getInstance(document, new FileOutputStream(fileName));
            document.open();

            Font titleFont = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
            Font bodyFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);

            Paragraph title = new Paragraph("Invoice", titleFont);
            title.setAlignment(Element.ALIGN_CENTER);
            document.add(title);

            document.add(new Paragraph("Transaction ID: " + transaction.getId(), bodyFont));
            document.add(new Paragraph("Date: " + transaction.getTransactionDate(), bodyFont));
            document.add(new Paragraph("Total Amount: $" + transaction.getTotalAmount(), bodyFont));
            document.add(new Paragraph("\n"));

            PdfPTable table = new PdfPTable(4); // 4 columns.
            table.setWidthPercentage(100); // Width 100%
            table.setSpacingBefore(10f); // Space before table
            table.setSpacingAfter(10f); // Space after table

            PdfPCell cell1 = new PdfPCell(new Phrase("Item Name", bodyFont));
            PdfPCell cell2 = new PdfPCell(new Phrase("Quantity", bodyFont));
            PdfPCell cell3 = new PdfPCell(new Phrase("Type", bodyFont));
            PdfPCell cell4 = new PdfPCell(new Phrase("Price", bodyFont));

            table.addCell(cell1);
            table.addCell(cell2);
            table.addCell(cell3);
            table.addCell(cell4);

            for (TransactionItem item : transaction.getItems()) {
                table.addCell(new PdfPCell(new Phrase(item.getItemName(), bodyFont)));
                table.addCell(new PdfPCell(new Phrase(String.valueOf(item.getQuantity()), bodyFont)));
                table.addCell(new PdfPCell(new Phrase(item.getItemType(), bodyFont)));
                table.addCell(new PdfPCell(new Phrase(String.valueOf(item.getPrice()), bodyFont)));
            }

            document.add(table);
            document.close();

            JOptionPane.showMessageDialog(this, "Invoice generated successfully: " + fileName, "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (DocumentException | FileNotFoundException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error generating invoice: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }


    
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(TransactionManagementForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(TransactionManagementForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(TransactionManagementForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(TransactionManagementForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new TransactionManagementForm(new TransactionService()).setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addItemButton;
    private javax.swing.JTextField itemNameField;
    private javax.swing.JLabel itemNameLabel;
    private javax.swing.JTable itemTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel mainPane;
    private javax.swing.JButton newTransactionButton;
    private javax.swing.JTextField priceField;
    private javax.swing.JTextField quantityField;
    private javax.swing.JLabel quantityLabel;
    private javax.swing.JLabel quantityLabel1;
    private javax.swing.JLabel quantityLabel2;
    private javax.swing.JButton saveTransactionButton;
    private javax.swing.JTextField transactionDateField;
    private javax.swing.JLabel transactionLabel;
    private javax.swing.JLabel transactionLabel1;
    private javax.swing.JPanel transactionPane;
    private javax.swing.JTable transactionTable;
    private javax.swing.JButton viewTransactionButton;
    // End of variables declaration//GEN-END:variables
}
